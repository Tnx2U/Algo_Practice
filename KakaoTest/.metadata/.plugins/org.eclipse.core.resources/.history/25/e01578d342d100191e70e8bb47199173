import java.util.LinkedList;
import java.util.Stack;

public class Test2 {
	public static void main(String[] args) {
		String p = ")(";
		System.out.println(solution(p));
	}

	public static String solution(String p) {
		StringBuilder part1 = new StringBuilder();
		StringBuilder part2 = new StringBuilder();
		if(isCorrect(p))
			return p;
		
		//1. 빈문자는 그냥 반환
		if(p.length() == 0)
			return "";
		
		//2.문자열 w를 u와 v로 분리
		StringBuilder U = new StringBuilder();
		StringBuilder V = new StringBuilder();
		for (int i = 2; i < p.length(); i+=2) {
			if(isBalanced(p.substring(0, i))) {
				U.append(p.substring(0, i));
				V.append(p.substring(i, p.length()));
				break;
			}
		}
		
		//3. u가 올바르면 v에 대해 재귀후 붙여서 반환
		if(isCorrect(U.toString()))
			return U.append(solution(V.toString())).toString();
		else { //4. u가 올바른 문자열이 아니면
			part1.append('(');
			part1.append(solution(V.toString()));
			part1.append(')');
			
			U.deleteCharAt(U.length()-1);
			U.deleteCharAt(0);
			part1.append(getReverse(U.toString()));
		}
		
		return part1.toString();
	}
	
	private static boolean isBalanced(String s) {
		char[] arr = s.toCharArray();
		int count=0;
		for (int i = 0; i < arr.length; i++) {
			if(arr[i] == '(')
				count++;
		}
		if(count == s.length()/2)
			return true;
		else
			return false;
	}

	private static Object getReverse(String input) {
		StringBuilder result = new StringBuilder();
		char[] arr = input.toCharArray();
		for (char c:arr) {
			if(c == ')')
				result.append('(');
			else
				result.append(')');
		}
		return result;
	}
	
	
	public static boolean isCorrect(String s) {
		boolean result = true;
		Stack<Character> stk = new Stack<>();
		char[] arr = s.toCharArray();
		
		for (int i = 0; i < arr.length; i++) {
			if(arr[i] == '(')
				stk.push('(');
			else
				if(!stk.isEmpty())
					stk.pop();
				else {
					result = false;
					break;
				}
		}
		
		if(!stk.isEmpty()) {
			result = false;
		}
		return result;
	}
}
