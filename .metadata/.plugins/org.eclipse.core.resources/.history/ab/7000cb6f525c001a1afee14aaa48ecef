package D3;

import java.util.Scanner;

public class SE_D3_2814_최장경로 {
	static int N;
	static int M;
	static int[][] adj;
	static boolean[] visited;
	static int ans = 0;
	static int[][] memo;
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int TC = sc.nextInt();
		
		for (int tc = 1; tc <= TC; tc++) {
			N = sc.nextInt();
			M = sc.nextInt();
			adj = new int[N+1][N+1];
			memo = new int[1 << (N+1)][N+1];
			visited= new boolean[N+1];
			
			for (int i = 0; i < M; i++) {
				int a = sc.nextInt();
				int b = sc.nextInt();
				adj[a][b] = 1;
				adj[b][a] = 1;
			}
			ans = 0;
			for (int i = 1; i <= N; i++) {
//				visited[i] = true;
//				dfs(i,1);
//				visited[i] = false;
			}
			System.out.println("#"+tc+" "+ans);
		}
	}

	// v == 현재 노드
	static void dfs(int v, int visited) {
		if(memo[visited][v] != 0)
			return memo[visited][v];
		
		int ret = 1;
		
		for (int i = 1; i <= N; i++) {
			if(adj[v][i] == 1 && (visited & (1 << i)) == 0) {
				ret = Math.max(ret, dfs(i, visited | (1<<i))) + 1;
			}
		}
		memo[visited][v] = ret;
		return 현재정점으로부터 남은 최장경로;
	}
	
	
//	static void dfs(int v, int cnt) {
//		// 더 이상 방문할 노드가 없음 : 기저파트
//		ans = Math.max(ans, cnt);
//		
//		//모든 노드 중에서 나와 간선이 존재하고, 아직 방문하지 않은 노드라면 방문
//		for (int i = 1; i <= N; i++) {
//			if(adj[v][i] == 1 && !visited[i]) {
//				visited[i] = true;
//				dfs(i, cnt + 1);
//				visited[i] = false;
//			}
//		}
//	}
}
