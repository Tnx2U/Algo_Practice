package 모의;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class SE_모의_2115_벌꿀채취 {
	static int N,M,C; // N : 벌통크기, M : 연속된 벌통수, C: 채취량
	static int[][] map, maxMap; // map : 입력된 벌통정도, maxMap : i,j 위치에서 가질 수 있는 최대 이익
	
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		//부분집합의 최대이익을 먼저 구하고 => 두 일꾼의 조합적 선택
		//한 행 연속된 M개추출경우의 수 : N-M+1
		//전체행은 당연히 위에게 *N
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int TC = Integer.parseInt(br.readLine());
		
		for (int tc = 1; tc <= TC; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			C = Integer.parseInt(st.nextToken());
			map = new int[N][N];
			maxMap = new int[N][N];
			
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				for(int j=0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			} 
		}
	}
	
	private static void makeMaxMap() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j <= N-M; j++) {
				
			}
		}
	}
	
	//i: 행의 위치, j: 열의 위치, cnt: 고려한원소수
	//sum: 부분집합에 속한 원소의 합, powSum: 부분집합에 속한 원소의 이익
	private static void makeMaxSubset(int i, int j, int cnt, int sum, int powSum) {
		//i,j 위치의 원소를 선택
		makeMaxSubset(i, j+1, cnt+1, sum+map[i][j], powSum+map[i][j]*map[i][j]);
		
		//비선택
	}
}
